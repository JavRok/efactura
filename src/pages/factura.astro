---
import Layout from "../layouts/Layout.astro";
import EditableText from "../components/EditableText";
import EditableNumber from "../components/EditableNumber";
import FormattedNumber from "../components/FormattedNumber";
import InvoiceTable from "../components/InvoiceTable";
import { getInvoiceField } from "../stores/invoiceStore";

import pdfStyle from "../styles/print-pdf-styles.css?raw";

const currency = "EUR";
const currencySymbol = "€";

const showIncomeTax = getInvoiceField("showIncomeTax");
const showVAT = getInvoiceField("showVAT");
---

<Layout title="Formulario de prueba">
  <main class="min-h-screen bg-gray-100 py-8">

    <form class="max-w-4xl mx-auto">
      <h1 class="text-2xl font-bold text-gray-800 mb-3">Factura de prueba</h1>
      <p class="mb-6">
        Modifica la factura con tus datos, puedes editar la mayoria de campos
        pinchando encima o utilizando navegacion por teclado (tecla tab)
      </p>

      <!-- Invoice Options -->
      <div class="mb-6">
        <h3 class="font-bold text-lg mb-1">Opciones</h3>
        <div class="flex flex-wrap gap-4">
          <label class="inline-flex items-center cursor-pointer">
            <input
              type="checkbox"
              id="show-vat"
              checked={showVAT}
              class="form-checkbox h-5 w-5 text-blue-600 rounded focus:ring-blue-500"
            />
            <span class="ml-2 text-gray-700">IVA</span>
          </label>

          <label class="inline-flex items-center cursor-pointer">
            <input
              type="checkbox"
              id="show-income-tax"
              checked={showIncomeTax}
              class="form-checkbox h-5 w-5 text-blue-600 rounded focus:ring-blue-500"
            />
            <span class="ml-2 text-gray-700">IRPF</span>
          </label>
        </div>
      </div>

      <div class="max-w-4xl mx-auto mb-4 flex justify-end">
        <div id="export-pdf" class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded">
          Descargar PDF
        </div>
      </div>

      <!-- Printable Invoice start -->
      <div class="p-6 bg-white rounded-sm shadow-md" id="invoice-form">
        <!-- Invoice Header -->
        <div class="flex justify-between items-start mb-10">
          <div>
            <h1 class="text-5xl font-bold mb-4">FACTURA</h1>
            <div class="border-2 border-black p-2 w-64">
              <div class="flex font-semibold">
                Num:&nbsp;
                <EditableText
                  client:load
                  name="invoiceNumber"
                  maxLength={20}
                  className="px-2"
                />
              </div>
              <div class="flex mt-2">
                Fecha:&nbsp;
                <EditableText
                  client:load
                  name="invoiceDate"
                  maxLength={10}
                  className="px-2"
                />
              </div>
            </div>
          </div>
          <div class="text-6xl font-light">B</div>
        </div>

        <!-- Client and Company Information -->
        <div class="flex mb-10">
          <div class="w-1/2 pr-8">
            <h2 class="font-bold text-lg mb-2">DATOS DEL CLIENTE</h2>
            <EditableText client:load name="myCompanyName" />
            <EditableText client:load name="myCompanyEmail" />
            <EditableText client:load name="myCompanyPhone" />
            <EditableText client:load name="myCompanyAddress" />
          </div>
          <div class="border-l border-gray-400"></div>
          <div class="w-1/2 pl-8">
            <h2 class="font-bold text-lg mb-2">DATOS DE LA EMPRESA</h2>
            <EditableText client:load name="companyName" />
            <EditableText client:load name="companyEmail" />
            <EditableText client:load name="companyPhone" />
            <EditableText client:load name="companyAddress" />
          </div>
        </div>

        <!-- Invoice Items Table - Now using the React component -->
        <InvoiceTable
          client:load
          currency={currency}
          currencySymbol={currencySymbol}
        />

        <!-- Divider -->
        <div class="border-t border-gray-400 my-6"></div>

        <!-- Tax and Total -->
        <div class="flex justify-end mb-10">
          <table class="w-1/2">
            <tr>
              <td class="p-2">Base imponible</td>
              <td class="text-center p-2"></td>
              <td class="text-center p-2">
                <FormattedNumber
                  client:load
                  decimals={2}
                  currency={currency}
                  storeField="subtotal"
                /></td
              >
            </tr>
            <tr id="vat-row" class={showVAT ? "" : "collapse"}>
              <td class="p-2">IVA</td>
              <td class="text-center p-2">
                <EditableNumber
                  client:load
                  decimals={0}
                  min={0}
                  max={21}
                  name="vatRate"
                  symbol="%"
                />
              </td>
              <td class="text-center p-2">
                <FormattedNumber
                  client:load
                  decimals={2}
                  currency={currency}
                  storeField="vatTotal"
                />
              </td>
            </tr>

            <tr id="income-tax-row" class={showIncomeTax ? "" : "collapse"}>
              <td class="p-2">IRPF</td>
              <td class="text-center p-2">
                <EditableNumber
                  client:load
                  decimals={0}
                  min={0}
                  max={15}
                  name="incomeTaxRate"
                  symbol="%"
                />
              </td>
              <td class="text-center p-2">
                <FormattedNumber
                  client:load
                  decimals={2}
                  currency={currency}
                  storeField="incomeTax"
                />
              </td>
            </tr>

            <tr class="border-2 border-black">
              <td class="p-2 font-bold">TOTAL</td>
              <td class="text-center p-2"></td>
              <td class="text-center p-2 font-bold">
                <FormattedNumber
                  client:load
                  decimals={2}
                  currency={currency}
                  storeField="total"
                />
              </td>
            </tr>
          </table>
        </div>

        <!-- Payment Information -->
        <div class="mb-10">
          <div class="border-2 border-black p-4 w-96">
            <h2 class="font-bold text-lg mb-2">INFORMACIÓN DE PAGO</h2>
            <p>Transferencia bancaria</p>
            <EditableText client:load name="paymentBank" />
            <div class="flex">
              <span>Nombre:&nbsp;</span>
              <EditableText client:load name="paymentName" />
            </div>
            <div class="flex">
              <span>IBAN:&nbsp;</span>
              <EditableText client:load name="paymentIBAN" />
            </div>
            <div class="flex">
              <span>SWIFT/BIC:&nbsp;</span>
              <EditableText client:load name="paymentSWIFT" />
            </div>
          </div>
        </div>

        <!-- Footer -->
        <div class="text-center mt-16 pt-4 border-t border-gray-400">
          <div class="text-lg font-semibold">
            <EditableText client:load name="website" />
          </div>
        </div>
      </div>
    </form>
    <div id="pdf-styles" style="display: none;">{pdfStyle}</div>
  </main>

  <!--Example of controls using astro and plain JS instead of JSX components (just for learning purposes)-->
  <script>
    import { updateInvoiceField } from "../stores/invoiceStore";

    // Get the checkbox and row elements
    const showVatCheckbox = document.getElementById(
      "show-vat",
    ) as HTMLInputElement;
    const showIncomeTaxCheckbox = document.getElementById(
      "show-income-tax",
    ) as HTMLInputElement;
    const vatRow = document.getElementById("vat-row");
    const incomeTaxRow = document.getElementById("income-tax-row");

    // Add event listeners to checkboxes
    showVatCheckbox?.addEventListener("change", (e) => {
      const isChecked = (e.target as HTMLInputElement).checked;

      // Update the store
      updateInvoiceField("showVAT", isChecked);

      // Show/hide the row
      if (vatRow) {
        vatRow.className = isChecked ? "" : "collapse";
      }

      // If hiding, set the rate to 0 for the totals calculation
      updateInvoiceField("vatRate", isChecked ? 21 : 0);
    });

    showIncomeTaxCheckbox?.addEventListener("change", (e) => {
      const isChecked = (e.target as HTMLInputElement).checked;

      // Update the store
      updateInvoiceField("showIncomeTax", isChecked);

      // Show/hide the row
      if (incomeTaxRow) {
        incomeTaxRow.className = isChecked ? "" : "collapse";
      }

      updateInvoiceField("incomeTaxRate", isChecked ? 15 : 0);
    });

    // PDF export functionality
    document.getElementById('export-pdf')?.addEventListener('click', async function() {
      // Show loading indicator
      const exportButton = document.getElementById('export-pdf');
      if (!exportButton) return;

      const originalText = exportButton.textContent || 'Descargar PDF';
      exportButton.textContent = 'Generando PDF...';
      exportButton.classList.add('opacity-70');
      exportButton.style.cursor = 'wait';

      try {
        // Get the invoice element
        const invoiceElement = document.getElementById('invoice-form');
        if (!invoiceElement) {
          throw new Error('No se encontró el formulario de factura.');
        }

        // Create a clone of the invoice element to modify without affecting the original
        const invoiceClone = invoiceElement.cloneNode(true) as HTMLElement;

        // Process all editable fields to show their current values
        invoiceClone.querySelectorAll('[contenteditable="true"]').forEach(el => {
          el.setAttribute('contenteditable', 'false');
        });

        // Remove any buttons or interactive elements
        invoiceClone.querySelectorAll('button, input[type="button"]').forEach(el => {
          el.style.display = 'none';
        });

        // Get the PDF styles from the hidden element
        const pdfStyle = document.getElementById('pdf-styles')?.textContent || '';

        // Create the HTML content for the PDF
        const htmlContent = `
          <!DOCTYPE html>
          <html>
          <head>
            <title>Factura PDF</title>
            <meta charset="UTF-8">
            <style>
            ${pdfStyle}
            </style>
          </head>
          <body>
            ${invoiceClone.outerHTML}
          </body>
          </html>
        `;

        // Send the HTML to the server for PDF generation
        const response = await fetch('/api/generate-pdf', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ html: htmlContent }),
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Error al generar el PDF');
        }

        // Get the PDF blob
        const pdfBlob = await response.blob();

        // Create a download link for the PDF
        const downloadUrl = URL.createObjectURL(pdfBlob);
        const downloadLink = document.createElement('a');
        downloadLink.href = downloadUrl;
        downloadLink.download = 'factura.pdf';
        document.body.appendChild(downloadLink);
        downloadLink.click();
        document.body.removeChild(downloadLink);
        URL.revokeObjectURL(downloadUrl);

      } catch (error) {
        console.error('Error generating PDF:', error);
        alert(error instanceof Error ? error.message : 'Error al generar el PDF. Por favor, inténtalo de nuevo.');
      } finally {
        // Restore button state
        exportButton.textContent = originalText;
        exportButton.classList.remove('opacity-70');
        exportButton.style.cursor = 'pointer';
      }
    });
  </script>
</Layout>
